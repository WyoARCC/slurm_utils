#!/apps/system/python2/2.7.11/bin/python
#
# New arccjobs command that can summarize running jobs
# in specialized orders like strictly user, account only
# qos breakdown, etc. 
#
# NOTE: There seems to be quite a bit of code repeated since
# I started suggesting that I could do this better here. 
#

#
# Import necessary modules
#
import sys,os
from pwd import getpwnam,getpwuid
import time
import argparse

import pyslurm

# Get the current time
CURR_TIME = int(time.time())

# Get console dims
def terminal_size():
    import fcntl, termios, struct
    h, w, hp, wp = struct.unpack('HHHH',
        fcntl.ioctl(0, termios.TIOCGWINSZ,
        struct.pack('HHHH', 0, 0, 0, 0)))
    return w, h
CONS_WIDTH,CONS_HEIGHT = terminal_size()
CONS_WIDTH -= 1

# Basic "summary" class for holding the necessary data
class JobsSummary(object):
    def __init__(self):
        self.njobs = {"pending":0,"running":0,"completed":0}
        self.ncpus = {"pending":0,"running":0,"completed":0}
        self.wtime = {"pending":0.0,"running":0.0,"completed":0.0}

    def addJob(self,state,ncpus,wtime):
        k = state
        self.njobs[k] += 1
        self.ncpus[k] += ncpus
        self.wtime[k] += wtime # Can be pending or running
        return None

    def pprint(self):
        print(self.njobs)
        print(self.ncpus)
        print(self.wtime)
        return None

    def __str__(self):
        x = "{rjobs:5d} {rcpus:8d} {rtime:11.2f} {pjobs:5d} {pcpus:8d} {ptime:11.2f}".format(
                rjobs=self.njobs["running"], rcpus=self.ncpus["running"], rtime=self.wtime["running"],
                pjobs=self.njobs["pending"], pcpus=self.ncpus["pending"], ptime=self.wtime["pending"] )
        return x

def printHeader(title="blah"):
    print(CONS_WIDTH*'-')
    print(title.center(CONS_WIDTH,' '))
    print(CONS_WIDTH*'-')

def printTotals(total_string = "blah"):
    print(CONS_WIDTH*'-')
    print(total_string)
    print(CONS_WIDTH*'-')

def printTableHeader(main="Entity",submain="",subsubmain=""):
    if "" == submain:
        x = "{entity:22s} {rjobs:>5s} {rcpus:>8s} {rtime:>11s} {pjobs:>5s} {pcpus:>8s} {ptime:>11s}".format(
            entity=main, 
            rjobs="rjobs", rcpus="rcpus", rtime="rcpuh", 
            pjobs="pjobs", pcpus="pcpus", ptime="pcpuh"  )
    elif "" == subsubmain:
        x  = "{entity:22s}\n ".format(entity=main)
        x += "{subent:21s} {rjobs:>5s} {rcpus:>8s} {rtime:>11s} {pjobs:>5s} {pcpus:>8s} {ptime:>11s}".format(
                subent=submain,
                rjobs="rjobs", rcpus="rcpus", rtime="rcpuh",
                pjobs="pjobs", pcpus="pcpus", ptime="pcpuh"  )
    else:
        x  = "{entity:22s}\n {subent:21s}\n  ".format(entity=main,subent=submain)
        x += "{ssubent:20s} {rjobs:>5s} {rcpus:>8s} {rtime:>11s} {pjobs:>5s} {pcpus:>8s} {ptime:>11s}".format(
                ssubent=subsubmain,
                rjobs="rjobs", rcpus="rcpus", rtime="rcpuh",
                pjobs="pjobs", pcpus="pcpus", ptime="pcpuh"  )


    print(x)
    print(CONS_WIDTH*'-')

# This can no be renamed the user summary :)
def userSummary(json=False):

    cluster = JobsSummary()

    user_summary = {}
    users = {};

    jobs = pyslurm.job().get()
    for id,job in jobs.iteritems():
        state = job["job_state"].lower()
        ncpus = job["num_cpus"]
        if state == "pending":
            # Warning: time_limit stored in minutes
            wtime = float( job["time_limit"] ) / 60.0
        elif state == "running":
            wtime = float( CURR_TIME - job["start_time"] ) / 3600.0
        wtime *= float(ncpus)

        userid = job["user_id"]
        if userid not in users.keys():
            users[userid] = getpwuid(userid)[0]
            user_summary[users[userid]] = JobsSummary()
       
        user_summary[users[userid]].addJob(
                state,ncpus,wtime
                )

        cluster.addJob(
            state,ncpus,wtime
            )
    printHeader(title="User Summary")
    printTableHeader(main="User")
    for k,v in sorted(user_summary.iteritems()):
        print("{user:22s} {data}".format(user=k,data=str(v)))
    printTotals(total_string = "{summary:22s} {data}".format(summary="TOTAL",data=str(cluster)))

    return 0

def acctSummary(json=False):

    cluster = JobsSummary()

    acct_summary = {}
    
    jobs = pyslurm.job().get()
    for id,job in jobs.iteritems():
        state = job["job_state"].lower()
        ncpus = job["num_cpus"]
        if "pending" == state:
            wtime = float( job["time_limit"] ) / 60.0
        elif state == "running":
            wtime = float( CURR_TIME - job["start_time"] ) / 3600.0
        wtime *= float(ncpus)
        acct = job["account"]
        if acct not in acct_summary.keys():
            acct_summary[acct] = JobsSummary()
        acct_summary[acct].addJob( state, ncpus, wtime )

        cluster.addJob( state, ncpus, wtime )

    printHeader(title="Account Job Summary")
    printTableHeader(main="Account")
    for k,v in sorted(acct_summary.iteritems()):
        print("{acct:22s} {data}".format(acct=k,data=str(v)))
    printTotals(total_string = "{summary:22s} {data}".format(summary="TOTAL",data=str(cluster)))
    return 0

def qosSummary(json=False):

    cluster = JobsSummary()
    
    qos_summary = {}

    jobs = pyslurm.job().get()
    for id,job in jobs.iteritems():
        state = job["job_state"].lower()
        ncpus = job["num_cpus"]
        if "pending" == state:
            wtime = float( job["time_limit"] ) / 60.0
        elif "running" == state:
            wtime = float( CURR_TIME - job["start_time"] ) / 3600.0
        wtime *= float( ncpus )
        qos = job["qos"]
        if qos not in qos_summary.keys():
            qos_summary[qos] = JobsSummary()
        qos_summary[qos].addJob( state, ncpus, wtime )

        cluster.addJob( state, ncpus, wtime )

    printHeader(title="QoS Job Summary")
    printTableHeader(main="QoS")
    for k,v in sorted(qos_summary.iteritems()):
        print("{qos:22s} {data}".format(qos=k,data=str(v)))
    printTotals(total_string = "{summary:22s} {data}".format(summary="TOTAL",data=str(cluster)))
    return 0

def auSummary(json=False):

    printHeader(title="Account / User Job Summary")
    printTableHeader(main="Account",submain="User")
    print ""
    printTotals(total_string = "{summary:22s} {data}".format(summary="TOTAL",data="blahblahblah"))
    return 0

def qaSummary(json=False):

    return 0

def quSummary(json=False):

    return 0

def qauSummary(json=False):

    printHeader(title="QoS / Account / User Job Summary")
    printTableHeader(main="QoS",submain="Account",subsubmain="User")
    print ""
    printTotals(total_string = "{summary:22s} {data}".format(summary="TOTAL",data="blahblahblah"))
    return 0

    

def main():

    parser = argparse.ArgumentParser(description="Slurm Job Summary")
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-u',action="store_true",help="Summary of user jobs, accounts/qos not considered")
    group.add_argument('-a',action="store_true",help="Summary of account jobs, users/qos not considered")
    group.add_argument('-q',action="store_true",help="Summary of qos jobs, users/accounts not considered")
    group.add_argument('-au',action="store_true",help="Heirarchy for account and user job summary")
    group.add_argument('-qa',action="store_true",help="Heirarchy for QoS and account job summary")
    group.add_argument('-qu',action="store_true",help="Heirarchy for QoS and user job summary")
    group.add_argument('-qau',action="store_true",help="Heirarchy for Qos/Account/User job summary")

    args = parser.parse_args()

    if args.u == True:
        return userSummary()

    if args.a == True:
        return acctSummary()

    if args.q == True:
        return qosSummary()

    if args.au == True:
        return auSummary()

    if args.qau == True:
        return qauSummary()

    return userSummary()


if __name__ == "__main__": main()
